import datetime
from textwrap import dedent


def looker_warning(objects_in_file):

    total_files = ""
    if objects_in_file > 1:
        total_files = f"There are {objects_in_file} objects in this file."
    else:
        total_files = f"There is {objects_in_file} object in this file."

    # timestamp to nearest second
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    return dedent(
        f"""
    # This file is auto-generated by the Looker Generator.
    # Do not edit this file directly, as it will be overridden
    # Instead, extend this Looker file in a separate file
    # - Editable: No
    # - Generated at: {now}
    # - {total_files}

    """
    )


looker_timeframes = ["raw", "time", "date", "week", "month", "quarter", "year"]


def bigquery_type_to_looker(bigquery_type):

    bigquery_type = bigquery_type.upper()

    types = {
        "STRING": "string",
        "BOOLEAN": "yesno",
        "NUMERIC": "number",
        "FLOAT": "number",
        "INTEGER": "number",
        "DATE": "time",
        "TIME": "time",
        "TIMESTAMP": "time",
        "DATETIME": "time",
        "RECORD": None,
    }
    # when type not in types, raise exception
    if bigquery_type not in types:
        raise raise_type_not_found(bigquery_type)
    return types[bigquery_type]


def raise_type_not_found(type):
    return TypeError(f"Type {type} not in types")
